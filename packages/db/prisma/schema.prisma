// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model SyncInfo {
  operation   String   @id
  blockNumber BigInt
  createdAt   DateTime @default(now())
  updatedAt   DateTime @default(now()) @updatedAt
}

model TransferEvent {
  blockNumber      BigInt
  from             String
  to               String
  tokenId          BigInt
  contractId       Int    @default(0)
  transactionIndex Int
  logIndex         Int

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt

  @@unique([blockNumber, transactionIndex])
  @@index([to])
  @@index([from])
  @@index([contractId])
}

model ERC20TransferEvent {
  transactionIndex Int
  logIndex         Int
  blockNumber      BigInt
  from             String
  to               String
  value            String
  contractId       Int    @default(0)

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt

  @@unique([blockNumber, transactionIndex])
  @@index([to])
  @@index([from])
  @@index([contractId])
  @@index([blockNumber])
}

model ERC20TransferEvent2 {
  transactionIndex Int
  logIndex         Int
  blockNumber      BigInt
  from             String
  to               String
  value            String
  contractId       Int    @default(0)

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt

  @@unique([blockNumber, transactionIndex])
  @@index([to])
  @@index([from])
  @@index([contractId])
  @@index([blockNumber])
}

model PoapTransferEvent {
  transactionIndex Int
  logIndex         Int
  blockNumber      BigInt
  from             String
  to               String
  tokenId          BigInt

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt

  @@unique([blockNumber, transactionIndex])
  @@index([tokenId])
  @@index([from])
  @@index([blockNumber])
  @@index([to])
}

model PoapEventTokenEvent {
  transactionIndex Int
  logIndex         Int
  blockNumber      BigInt
  tokenId          BigInt
  eventId          BigInt

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt

  @@unique([blockNumber, transactionIndex])
  @@index([tokenId])
  @@index([eventId])
  @@index([blockNumber])
}

model BeaconDepositEvent {
  transactionIndex Int
  logIndex         Int
  value            String
  blockNumber      BigInt
  address          String

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt

  @@unique([blockNumber, transactionIndex])
}

model Address {
  address          String
  network          String
  firstTx          String?
  firstTxTimestamp DateTime?
  createdAt        DateTime  @default(now())
  updatedAt        DateTime  @default(now()) @updatedAt

  User    User?   @relation(fields: [userFid], references: [fid])
  userFid BigInt?

  @@id([address, network])
}

model User {
  fid            BigInt         @id
  username       String?
  displayName    String?
  pfp            String?
  bio            String?
  followersCount Int
  PackagedCast   PackagedCast[]
  UserCred       UserCred[]
  addresses      Address[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model TxCount {
  address   String
  txCount   Int
  network   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@id([address, network])
}

model PackagedCast {
  id                String    @id
  text              String
  timestamp         DateTime
  mentions          BigInt[]
  mentionsPositions Int[]
  embeds            String[]
  likesCount        BigInt    @default(0)
  recastsCount      BigInt    @default(0)
  repliesCount      BigInt    @default(0)
  hash              String
  parentUrl         String?
  parentHash        String?
  rootParentHash    String?
  score             BigInt    @default(0)
  deletedAt         DateTime?
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt

  user     User       @relation(fields: [fid], references: [fid])
  fid      BigInt
  Reaction Reaction[]

  parent   PackagedCast?  @relation("ParentCast", fields: [parentHash], references: [id])
  children PackagedCast[] @relation("ParentCast")
}

model UserCred {
  cred String
  fid  BigInt
  user User   @relation(fields: [fid], references: [fid])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@id([fid, cred])
}

model Reaction {
  fid          BigInt
  createdAt    DateTime     @default(now())
  updatedAt    DateTime     @default(now()) @updatedAt
  castId       String
  reactionType Int          @db.SmallInt
  timestamp    DateTime
  targetCast   PackagedCast @relation(fields: [castId], references: [id], onDelete: NoAction, onUpdate: NoAction)

  @@unique([fid, castId, reactionType])
}

model NotificationToken {
  token String @id

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model TwitterUser {
  id         String  @id
  name       String
  ens        String
  ensAddress String
  handle     String
  followers  BigInt
  verified   Boolean
  ranking    BigInt

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Tweet {
  id       String @id
  authorId String
}
