// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Chain {
  Ethereum
  Zora
  Base
  Optimism
  PGN
}

model CreateDropEvent {
  transactionHash         String                    @id
  editionContractAddress  String                    @unique
  blockNumber             BigInt
  creator                 String
  createdAt               DateTime                  @default(now())
  updatedAt               DateTime                  @updatedAt
  connectedAddress        ConnectedAddress?         @relation(fields: [connectedCreator], references: [address])
  connectedCreator        String?
  metadataUpdates         MetadataUpdateEvent[]
  chain                   Chain                     @default(Zora)
  TransferEvent           TransferEvent[]
  EditionInitializedEvent EditionInitializedEvent[]
}

model MetadataUpdateEvent {
  transactionHash String           @id
  blockNumber     BigInt
  contractAddress String
  tokenURI        String
  name            String
  description     String
  image           String
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt
  CreateDropEvent CreateDropEvent? @relation(fields: [contractAddress], references: [editionContractAddress])
  chain           Chain            @default(Zora)
}

model EditionInitializedEvent {
  transactionHash String           @id
  blockNumber     BigInt
  contractAddress String
  description     String
  imageURI        String
  animationURI    String
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt
  CreateDropEvent CreateDropEvent? @relation(fields: [contractAddress], references: [editionContractAddress])
  chain           Chain            @default(Zora)
  TransferEvent   TransferEvent[]
}

model TransferEvent {
  transactionHash         String                   @id
  blockNumber             BigInt
  contractAddress         String
  tokenId                 BigInt
  from                    String
  to                      String
  createdAt               DateTime                 @default(now())
  updatedAt               DateTime                 @updatedAt
  CreateDropEvent         CreateDropEvent?         @relation(fields: [contractAddress], references: [editionContractAddress])
  EditionInitializedEvent EditionInitializedEvent? @relation(fields: [contractAddress], references: [contractAddress])
  chain                   Chain                    @default(Zora)

  connecttedTo     String?
  connectedAddress ConnectedAddress? @relation(fields: [connecttedTo], references: [address])
}

model User {
  fid                Int                @id
  fcUsername         String?
  displayName        String?
  pfp                String?
  bio                String?
  followersCount     Int                @default(0)
  createdAt          DateTime           @default(now())
  connectedAddresses ConnectedAddress[]
}

model ConnectedAddress {
  address   String   @id
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  User    User? @relation(fields: [userFid], references: [fid])
  userFid Int?

  drops     CreateDropEvent[]
  transfers TransferEvent[]
}

model HubEvent {
  id        BigInt   @id
  type      String
  body      Json
  timestamp DateTime
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model SyncInfo {
  eventName    String
  synchedBlock BigInt
  chain        Chain
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  @@id([eventName, chain])
}
