// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Chain {
  Ethereum
  Zora
  Base
  Optimism
  PGN
}

model CreateDropEvent {
  transactionHash        String   @id
  editionContractAddress String   @unique
  blockNumber            BigInt
  creator                String
  createdAt              DateTime @default(now())
  updatedAt              DateTime @updatedAt
  chain                  Chain    @default(Zora)
}

model MetadataUpdateEvent {
  transactionHash String   @id
  blockNumber     BigInt
  contractAddress String
  tokenURI        String
  name            String
  description     String
  image           String
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  chain           Chain    @default(Zora)
}

model EditionInitializedEvent {
  transactionHash String   @id
  blockNumber     BigInt
  contractAddress String
  description     String
  imageURI        String
  animationURI    String
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  chain           Chain    @default(Zora)
}

model TransferEvent {
  transactionHash String   @id
  blockNumber     BigInt
  contractAddress String
  tokenId         BigInt
  from            String
  to              String
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  chain           Chain    @default(Zora)

  // Optional foreign key
  connectedAddress           String?
  transferToConnectedAddress ConnectedAddress? @relation(fields: [connectedAddress], references: [address])
}

model SetupNewContractEvent {
  transactionHash String   @id
  blockNumber     BigInt
  newContract     String
  creator         String
  defaultAdmin    String
  contractURI     String
  name            String
  description     String
  image           String
  chain           Chain
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
}

model PurchasedEvent {
  transactionHash String @id
  blockNumber     BigInt
  quantity        BigInt
  value           BigInt
  tokenId         BigInt
  minter          String
  contractAddress String
  chain           Chain

  // Optional foreign key
  purchaseToConnectedAddress ConnectedAddress? @relation(fields: [connectedAddress], references: [address])
  connectedAddress           String?
}

model User {
  fid                Int                @id
  fcUsername         String?
  displayName        String?
  pfp                String?
  bio                String?
  followersCount     Int                @default(0)
  createdAt          DateTime           @default(now())
  connectedAddresses ConnectedAddress[]
}

model ConnectedAddress {
  address   String   @id
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  User    User? @relation(fields: [userFid], references: [fid])
  userFid Int?

  transfers TransferEvent[]
  purchases PurchasedEvent[]
}

model HubEvent {
  id        BigInt   @id
  type      String
  body      Json
  timestamp DateTime
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model SyncInfo {
  eventName    String
  synchedBlock BigInt
  chain        Chain
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  @@id([eventName, chain])
}
