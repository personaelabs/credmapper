// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Cred {
  Over100Txs
}

enum Chain {
  Zora
  Ethereum
  Optimism
}

enum Venue {
  Farcaster
  Lens
}

model PurchasedEvent {
  transactionHash String @id
  blockNumber     BigInt
  quantity        BigInt
  value           BigInt
  tokenId         BigInt
  minter          String
  contractAddress String
  chain           Chain

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt

  @@index([minter])
}

model TransferEvent {
  transactionHash String @id
  blockNumber     BigInt
  from            String
  to              String
  tokenId         String
  contractAddress String
  chain           Chain

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt

  @@index([to])
}

model User {
  fid                Int                @id
  username           String
  displayName        String
  pfp                String
  bio                String
  followersCount     Int
  createdAt          DateTime           @default(now())
  connectedAddresses ConnectedAddress[]
}

model ConnectedAddress {
  address   String   @id
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  User User @relation(fields: [fid], references: [fid])
  fid  Int
}

model SyncInfo {
  eventName    String
  synchedBlock BigInt
  chain        Chain
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  @@id([eventName, chain])
}

model ERC721Metadata {
  contractAddress String @id
  name            String
  chain           Chain

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model ERC721Token {
  contractAddress String
  tokenId         String
  name            String
  description     String
  image           String
  animation       String?
  chain           Chain
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  @@unique([contractAddress, tokenId])
}

model ERC1155Token {
  contractAddress String
  tokenId         BigInt
  name            String
  description     String
  image           String
  animation       String?
  chain           Chain
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  @@unique([contractAddress, tokenId])
}

model MirrorPost {
  digest                String   @id
  arweaveTx             String
  owner                 String
  title                 String
  body                  String
  timestamp             DateTime
  description           String
  imageURI              String
  proxyAddress          String
  symbol                String
  chain                 Chain
  originalContentDigest String
  blockNumber           BigInt   @default(0)
  createdAt             DateTime @default(now())
  updatedAt             DateTime @updatedAt

  @@index([owner])
}

model TokenBalance {
  address         String
  contractAddress String
  balance         BigInt
  chain           Chain
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  @@id([address, contractAddress])
}

model TxCount {
  address   String   @id
  venue     Venue
  txCount   Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model TGChat {
  chatId              String             @id
  venues              Venue[]            @default([Farcaster, Lens])
  dailyUpdatesEnabled Boolean            @default(true)
  createdAt           DateTime           @default(now())
  updatedAt           DateTime           @updatedAt
  PackagedCredSent    PackagedCredSent[]
}

model LensUserAddress {
  profileId String   @id
  address   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model PackagedCred {
  id               String             @id
  cred             Cred
  data             Json
  address          String
  venue            Venue
  createdAt        DateTime           @default(now())
  updatedAt        DateTime           @updatedAt
  PackagedCredSent PackagedCredSent[]
}

// Packaged cred sent to a chat. This is used to ensure idempotence.
model PackagedCredSent {
  packagedCredId String
  chatId         String
  packagedCred   PackagedCred @relation(fields: [packagedCredId], references: [id])
  chat           TGChat       @relation(fields: [chatId], references: [chatId])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([packagedCredId, chatId])
}
